generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  username       String     @unique
  gender         String
  password       String
  bio            String?
  image          String?
  website        String?
  interest       String?
  posts          Post[]     @relation("UserPosts")
  likedPosts     Like[]     @relation("UserLikes")
  sentMessages      Message[]    @relation("MessageSender")
  receivedMessages  Message[]    @relation("MessageReceiver")
  createdCommunities  Community[] @relation("Creator")
  memberOfCommunities CommunityMembership[] @relation("UserCommunityMembership")
  comments       Comment[]  @relation("Comments")
  following      Following[] @relation("FollowerRelation")
  followingCount Int @default(0)
  followersCount Int @default(0)
  followers      Following[] @relation("FollowingRelation")
  interestedIn   Matching[] @relation("PersonMatchingRelation")
  interestedBy   Matching[] @relation("InterestedInMatchingRelation")
  matchedUsers   String[]
  createdAt      DateTime   @default(now())
}

model Community {
  id             String    @id @default(uuid())
  name           String
  description    String
  image          String?
  category       String
  creator        User      @relation("Creator", fields: [creatorId], references: [id])
  creatorId      String
  posts          Post[]    @relation("CommunityPosts")
  postsCount     Int       @default(0)
  members        CommunityMembership[] @relation("CommunityMembership")
  membersCount    Int       @default(0)
  createdAt      DateTime  @default(now())
}

model Post {
  id             String     @id @default(uuid())
  image          String?
  content        String
  creator        User       @relation("UserPosts", fields: [creatorId], references: [id])
  creatorId      String
  likes          Like[]     @relation("PostLikes")
  likesCount     Int        @default(0)
  comments       Comment[]  @relation("PostComments")
  community      Community? @relation("CommunityPosts", fields: [communityId], references: [id])
  communityId    String?
  commentsCount  Int         @default(0)
  createdAt      DateTime   @default(now())
}
model Like {
  id        String    @id @default(uuid())
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  userId    String
  post      Post      @relation("PostLikes",fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
}

model Comment {
  id             String   @id @default(uuid())
  content        String
  creator        User     @relation("Comments", fields: [creatorId], references: [id])
  creatorId      String
  post           Post     @relation("PostComments", fields: [postId], references: [id])
  postId         String
  createdAt      DateTime @default(now())
}

model Following {
  id           String   @id @default(uuid())
  follower     User     @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())
  @@unique([followerId, followingId])
}
model CommunityMembership {
  id           String   @id @default(uuid())
  user         User     @relation("UserCommunityMembership", fields: [userId], references: [id])
  userId       String
  community    Community @relation("CommunityMembership", fields: [communityId], references: [id])
  communityId  String
  joinedAt     DateTime @default(now())

  @@unique([userId, communityId])
}

model Matching {
  id             String   @id @default(uuid())
  person         User     @relation("PersonMatchingRelation", fields: [personId], references: [id])
  personId       String
  interestedIn   User     @relation("InterestedInMatchingRelation", fields: [interestedInId], references: [id])
  interestedInId String
  createdAt      DateTime @default(now())
  @@unique([personId, interestedInId])
}
model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String
  message    String
  createdAt  DateTime @default(now())
}
