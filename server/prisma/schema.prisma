generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(uuid())
  fullname              String
  email                 String                @unique
  username              String                @unique
  gender                String?
  password              String
  birthday              String?
  bio                   String?
  college               String?
  interest              String?
  image                 String?
  website               String?
  following             Following[]           @relation("FollowerRelation")
  followingCount        Int                   @default(0)
  followersCount        Int                   @default(0)
  followers             Following[]           @relation("FollowingRelation")
  posts                 Post[]                @relation("UserPosts")
  likedPosts            PostLike[]            @relation("UserPostLikes")
  comments              Comment[]             @relation("UserComments")
  createdCommunities    Community[]           @relation("Creator")
  memberOfCommunities   CommunityMembership[] @relation("UserCommunityMembership")
  taggedInPosts         Post[]                @relation("UserPostTagging")
  InitiatorRelation     Match[]               @relation("Initiator")
  MatchedUserRelation   Match[]               @relation("MatchedUser")
  weeklyPoints          Int                   @default(0)
  totalPoints           Int                   @default(0)
  userNotification      Notification[]        @relation("UserNotification")
  notificationsAsFollower Notification[] @relation("FollowerRelationNotification")
  notificationsAsTagger Notification[] @relation("TaggerRelationNotification")
  notificationsAsNewCommunityMember Notification[] @relation("NewCommunityMemberRelation")
  createdAt             DateTime              @default(now())
}

model Match {
  id                String @id @default(uuid())
  initiator         User @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId       String
  matchedUser       User @relation("MatchedUser", fields: [matchedUserId], references: [id])
  matchedUserId     String
  task              String?
  isTaskCompleted   Boolean @default(false)
  createdAt         DateTime @default(now())
  expiresAt         DateTime @default(dbgenerated("(NOW() + INTERVAL '24 hours')"))
  notifications     Notification[] @relation("MatchNotifications")
  @@unique([initiatorId, matchedUserId])
}

model Following {
  id           String   @id @default(uuid())
  follower     User     @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())
  @@unique([followerId, followingId])
}

model Community {
  id             String    @id @default(uuid())
  name           String
  description    String
  private        Boolean? @default(false)
  image          String?
  creator        User      @relation("Creator", fields: [creatorId], references: [id])
  creatorId      String
  posts          Post[]    @relation("CommunityPosts")
  postsCount     Int       @default(0)
  members        CommunityMembership[] @relation("CommunityMembership")
  membersCount   Int       @default(0)
  notifications  Notification[] @relation("CommunityNotifications")
  createdAt      DateTime  @default(now())
}

model CommunityMembership {
  id           String   @id @default(uuid())
  user         User     @relation("UserCommunityMembership", fields: [userId], references: [id])
  userId       String
  community    Community @relation("CommunityMembership", fields: [communityId], references: [id])
  communityId  String
  joinedAt     DateTime @default(now())

  @@unique([userId, communityId])
}

model Post {
  id             String         @id @default(uuid())
  image          String?
  content        String
  creator        User           @relation("UserPosts", fields: [creatorId], references: [id])
  creatorId      String
  anonymity      Boolean        @default(false)
  likes          PostLike[]     @relation("PostLikes")
  likesCount     Int            @default(0)
  comments       Comment[]      @relation("PostComments")
  community      Community?     @relation("CommunityPosts", fields: [communityId], references: [id])
  communityId    String?
  commentsCount  Int            @default(0)
  taggedUser     User?          @relation("UserPostTagging", fields: [taggedUserId], references: [id])
  taggedUserId   String?
  notifications  Notification[] @relation("PostNotifications")

  createdAt      DateTime       @default(now())
  task           String?
}

model Comment {
  id             String   @id @default(uuid())
  content        String
  creator        User     @relation("UserComments", fields: [creatorId], references: [id])
  creatorId      String
  anonymity      Boolean  @default(false)
  post           Post     @relation("PostComments", fields: [postId], references: [id])
  postId         String
  createdAt      DateTime @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  user      User     @relation("UserPostLikes", fields: [userId], references: [id])
  userId    String
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

model Notification {
  id            String     @id @default(uuid())
  user User @relation("UserNotification", fields: [userId], references: [id])
  userId        String
  type          String     
  message       String
  isRead        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  post          Post?      @relation("PostNotifications", fields: [postId], references: [id])
  postId        String?
  match         Match?     @relation("MatchNotifications", fields: [matchId], references: [id])
  matchId       String?
  follower      User?      @relation("FollowerRelationNotification", fields: [followerId], references: [id])
  followerId    String?
  tagger        User?      @relation("TaggerRelationNotification", fields: [taggerId], references: [id])
  taggerId      String?
  community     Community? @relation("CommunityNotifications", fields: [communityId], references: [id])
  communityId   String?
  newCommunityMember User? @relation("NewCommunityMemberRelation", fields: [newCommunityMemberId], references: [id])
  newCommunityMemberId String?
}