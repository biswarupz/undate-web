generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id             String     @id @default(uuid())
  fullname       String
  email          String     @unique
  username       String     @unique
  gender         String?
  password       String
  birthday       String?
  bio            String?
  college        String?
  interest       String?
  image          String?
  website        String?
  initiatedMatches ProfileMatch[]            @relation("MatchInitiator")
  receivedMatches  ProfileMatch[]            @relation("MatchRecipient")
  following            Following[]           @relation("FollowerRelation")
  followingCount       Int                   @default(0)
  followersCount       Int                   @default(0)
  followers            Following[]           @relation("FollowingRelation")
  posts                Post[]                @relation("UserPosts")
  likedPosts           PostLike[]            @relation("UserPostLikes")
  comments             Comment[]             @relation("UserComments")
  sentMessages         Message[]             @relation("MessageSender")
  receivedMessages     Message[]             @relation("MessageReceiver")
  createdCommunities   Community[]           @relation("Creator")
  memberOfCommunities  CommunityMembership[] @relation("UserCommunityMembership")
  taggedInPosts        PostTagging[]         @relation("UserPostTagging")
  taggedInComments     CommentTagging[]      @relation("UserCommentTagging")
  createdAt            DateTime              @default(now())
}
model ProfileMatch {
  id           String   @id @default(uuid())
  initiator    User     @relation("MatchInitiator", fields: [initiatorId], references: [id])
  initiatorId  String
  recipient    User     @relation("MatchRecipient", fields: [recipientId], references: [id])
  recipientId  String
  isConfirmed  Boolean  @default(false)
  createdAt    DateTime @default(now())
  @@unique([initiatorId, recipientId])
}

model Following {
  id           String   @id @default(uuid())
  follower     User     @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())
  @@unique([followerId, followingId])
}

model Community {
  id             String    @id @default(uuid())
  name           String
  description    String
  private        Boolean? @default(false)
  image          String?
  creator        User      @relation("Creator", fields: [creatorId], references: [id])
  creatorId      String
  posts          Post[]    @relation("CommunityPosts")
  postsCount     Int       @default(0)
  members        CommunityMembership[] @relation("CommunityMembership")
  membersCount    Int       @default(0)
  createdAt      DateTime  @default(now())
}

model CommunityMembership {
  id           String   @id @default(uuid())
  user         User     @relation("UserCommunityMembership", fields: [userId], references: [id])
  userId       String
  community    Community @relation("CommunityMembership", fields: [communityId], references: [id])
  communityId  String
  joinedAt     DateTime @default(now())

  @@unique([userId, communityId])
}

model Post {
  id             String         @id @default(uuid())
  image          String?
  content        String
  creator        User           @relation("UserPosts", fields: [creatorId], references: [id])
  creatorId      String
  anonymity      Boolean        @default(false)
  likes          PostLike[]     @relation("PostLikes")
  likesCount     Int            @default(0)
  comments       Comment[]      @relation("PostComments")
  community      Community?     @relation("CommunityPosts", fields: [communityId], references: [id])
  communityId    String?
  commentsCount  Int            @default(0)
  taggedUsers    PostTagging[]  @relation("PostUserTagging")
  createdAt      DateTime       @default(now())
}

model Comment {
  id             String           @id @default(uuid())
  content        String
  creator        User             @relation("UserComments", fields: [creatorId], references: [id])
  creatorId      String
  anonymity      Boolean          @default(false)
  post           Post             @relation("PostComments", fields: [postId], references: [id])
  postId         String
  taggedUsers    CommentTagging[] @relation("CommentUserTagging")
  createdAt      DateTime         @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  user      User     @relation("UserPostLikes", fields: [userId], references: [id])
  userId    String
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

model PostTagging {
  id        String   @id @default(uuid())
  post      Post     @relation("PostUserTagging", fields: [postId], references: [id])
  postId    String
  user      User     @relation("UserPostTagging", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  @@unique([postId, userId])
}

model CommentTagging {
  id         String   @id @default(uuid())
  comment    Comment  @relation("CommentUserTagging", fields: [commentId], references: [id])
  commentId  String
  user       User     @relation("UserCommentTagging", fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  @@unique([commentId, userId])
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String
  message    String
  createdAt  DateTime @default(now())
  ttl        DateTime @default(dbgenerated("(NOW() + INTERVAL '1 day')")) 
}
